plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.2'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
}

group pluginGroup
version pluginVersion
def javaVersion = JavaVersion.VERSION_11
def kotlinJvmTarget = 11

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven {
        allowInsecureProtocol = true
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    maven {
        allowInsecureProtocol = true
        url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
    }
    maven {
        allowInsecureProtocol = true
        url 'http://maven.aliyun.com/nexus/content/repositories/google'
    }
    maven {
        allowInsecureProtocol = true
        url 'http://maven.aliyun.com/nexus/content/repositories/gradle-plugin'
    }
    mavenLocal()
    mavenCentral()
}

// Kotlin编译设置
kotlin {
    java {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }
    jvmToolchain(kotlinJvmTarget) // 设置Kotlin使用的JVM工具链版本，应与Java的兼容性设置保持一致
    // 其他Kotlin编译选项可根据需要添加
}

allprojects {
    tasks.withType(JavaCompile) {
        // 禁止过期方法检查
        options.deprecation = true
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

intellij {
    version.set(platformVersion)
    plugins = ["java"]
}

patchPluginXml {
    sinceBuild = sinceBuildVersion
    untilBuild = untilBuildVersion
}

tasks.buildSearchableOptions {
    enabled = false
}